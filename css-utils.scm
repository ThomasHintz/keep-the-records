(require-extension srfi-1)

(define ++ string-append)

(define css-unit (make-parameter "em"))

(define (att key value #!key (values #f))
  (++ key ": " (->string value) (if (number? value) (css-unit) "")
      (if values
          (fold (lambda (v o) (++ o " " (->string v) (if (number? v) (css-unit) "")))
                       ""
                       values)
          "")
      "; "))

(define (class class attributes)
  (++ "." class " { " attributes " } "))

(define (id id attributes)
  (++ "#" id " { " attributes " } "))

(define (color c) (att "color" c))
(define (background b) (att "background" b))
(define (background-image i) (att "background-image" i))
(define (background-color c) (att "background-color" c))
(define (border-radius r) (++ (att "border-radius" r) (att "-moz-border-radius" r)))
(define (border-top-left-radius r . s)
  (if (> (length s) 0)
      (let ((s-r (first s)))
        (++ (att "border-top-left-radius" r values: `(,s-r))
            (att "-moz-border-radius-topleft" r values: `(,s-r))))
      (++ (att "border-top-left-radius" r)
          (att "-moz-border-radius-topleft" r))))
(define (border-top-right-radius r . s)
  (if (> (length s) 0)
      (let ((s-r (first s)))
        (++ (att "border-top-right-radius" r values: `(,s-r))
            (att "-moz-border-radius-topright" r values: `(,s-r))))
      (++ (att "border-top-right-radius" r)
          (att "-moz-border-radius-topright" r))))
(define (border-bottom-left-radius r . s)
  (if (> (length s) 0)
      (let ((s-r (first s)))
        (++ (att "border-bottom-left-radius" r values: `(,s-r))
            (att "-moz-border-radius-bottomleft" r values: `(,s-r))))
      (++ (att "border-bottom-left-radius" r)
          (att "-moz-border-radius-bottomleft" r))))
(define (border-bottom-right-radius r . s)
  (if (> (length s) 0)
      (let ((s-r (first s)))
        (++ (att "border-bottom-right-radius" r values: `(,s-r))
            (att "-moz-border-radius-bottomright" r values: `(,s-r))))
      (++ (att "border-bottom-right-radius" r)
          (att "-moz-border-radius-bottomright" r))))
(define (box-shadow h-off v-off blur-r color #!key (inset #f) (spread-radius #f))
  (fold (lambda (a o)
          (++ o (att a
                     (if inset "inset" h-off)
                     values: (cond ((and inset spread-radius) `(,h-off ,v-off ,spread-radius ,blur-r ,color))
                                   (inset `(,h-off ,v-off ,blur-r ,color))
                                   (spread-radius `(,v-off ,spread-radius ,blur-r ,color))
                                   (#t `(,v-off ,blur-r ,color))))))
        ""
        '("box-shadow" "-webkit-box-shadow" "-moz-box-shadow")))
(define (font-family f) (att "font-family" f))
(define (margin m) (att "margin" m))
(define (margin-top m) (att "margin-top" m))
(define (margin-bottom m) (att "margin-bottom" m))
(define (margin-left m) (att "margin-right" m))
(define (margin-right m) (att "margin-right" m))
(define (text-align a) (att "text-align" a))
(define (width w) (att "width" w))
(define (height h) (att "height" h))
(define (float f) (att "float" f))
(define (padding p) (att "padding" p))
(define (padding-top p) (att "padding-top" p))
(define (padding-bottom p) (att "padding-bottom" p))
(define (padding-left p) (att "padding-left" p))
(define (padding-right p) (att "padding-right" p))
(define (font-size s) (att "font-size" s))
(define (font-style s) (att "font-style" s))
(define (font-weight w) (att "font-weight" w))
(define (text-decoration d) (att "text-decoration" d))
(define (border s t c . r)
  (if (> (length r) 0)
      (att "border" s values: `(,t ,c ,(first r) ,(second r) ,(third r)))
      (att "border" s values: `(,t ,c))))
(define (border-top s t c) (att "border-top" s values: `(,t ,c)))
(define (border-bottom s t c) (att "border-bottom" s values: `(,t ,c)))
(define (border-left s t c) (att "border-left" s values: `(,t ,c)))
(define (border-right s t c) (att "border-right" s values: `(,t c)))
(define (position p) (att "position" p))
(define (z-index i) (att "z-index" i))
(define (css-display d) (att "display" d))
(define (clear c) (att "clear" c))
(define (cursor c) (att "cursor" c))